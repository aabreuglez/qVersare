// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QVERSO.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QVERSO.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* QVERSO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QVERSO_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QVERSO_2eproto() {
  protobuf_AddDesc_QVERSO_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QVERSO.proto");
  GOOGLE_CHECK(file != NULL);
  QVERSO_descriptor_ = file->message_type(0);
  static const int QVERSO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, requestavatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, timestamp_),
  };
  QVERSO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QVERSO_descriptor_,
      QVERSO::default_instance_,
      QVERSO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QVERSO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QVERSO));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QVERSO_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QVERSO_descriptor_, &QVERSO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QVERSO_2eproto() {
  delete QVERSO::default_instance_;
  delete QVERSO_reflection_;
}

void protobuf_AddDesc_QVERSO_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014QVERSO.proto\"\224\001\n\006QVERSO\022\r\n\005login\030\001 \001(\010"
    "\022\020\n\010username\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\014\n\004"
    "room\030\004 \001(\t\022\017\n\007message\030\005 \001(\t\022\025\n\rrequestAv"
    "atar\030\006 \001(\010\022\016\n\006avatar\030\007 \001(\014\022\021\n\ttimestamp\030"
    "\010 \001(\t", 165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QVERSO.proto", &protobuf_RegisterTypes);
  QVERSO::default_instance_ = new QVERSO();
  QVERSO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QVERSO_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QVERSO_2eproto {
  StaticDescriptorInitializer_QVERSO_2eproto() {
    protobuf_AddDesc_QVERSO_2eproto();
  }
} static_descriptor_initializer_QVERSO_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QVERSO::kLoginFieldNumber;
const int QVERSO::kUsernameFieldNumber;
const int QVERSO::kPasswordFieldNumber;
const int QVERSO::kRoomFieldNumber;
const int QVERSO::kMessageFieldNumber;
const int QVERSO::kRequestAvatarFieldNumber;
const int QVERSO::kAvatarFieldNumber;
const int QVERSO::kTimestampFieldNumber;
#endif  // !_MSC_VER

QVERSO::QVERSO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QVERSO)
}

void QVERSO::InitAsDefaultInstance() {
}

QVERSO::QVERSO(const QVERSO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QVERSO)
}

void QVERSO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = false;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestavatar_ = false;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QVERSO::~QVERSO() {
  // @@protoc_insertion_point(destructor:QVERSO)
  SharedDtor();
}

void QVERSO::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (room_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void QVERSO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QVERSO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QVERSO_descriptor_;
}

const QVERSO& QVERSO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QVERSO_2eproto();
  return *default_instance_;
}

QVERSO* QVERSO::default_instance_ = NULL;

QVERSO* QVERSO::New() const {
  return new QVERSO;
}

void QVERSO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QVERSO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(login_, requestavatar_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_room()) {
      if (room_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QVERSO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QVERSO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool login = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &login_)));
          set_has_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room;
        break;
      }

      // optional string room = 4;
      case 4: {
        if (tag == 34) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message;
        break;
      }

      // optional string message = 5;
      case 5: {
        if (tag == 42) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_requestAvatar;
        break;
      }

      // optional bool requestAvatar = 6;
      case 6: {
        if (tag == 48) {
         parse_requestAvatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requestavatar_)));
          set_has_requestavatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 8;
      case 8: {
        if (tag == 66) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QVERSO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QVERSO)
  return false;
#undef DO_
}

void QVERSO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QVERSO)
  // optional bool login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->login(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string room = 4;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room(), output);
  }

  // optional string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  // optional bool requestAvatar = 6;
  if (has_requestavatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requestavatar(), output);
  }

  // optional bytes avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->avatar(), output);
  }

  // optional string timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QVERSO)
}

::google::protobuf::uint8* QVERSO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QVERSO)
  // optional bool login = 1;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->login(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string room = 4;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->room(), target);
  }

  // optional string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  // optional bool requestAvatar = 6;
  if (has_requestavatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requestavatar(), target);
  }

  // optional bytes avatar = 7;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->avatar(), target);
  }

  // optional string timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QVERSO)
  return target;
}

int QVERSO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool login = 1;
    if (has_login()) {
      total_size += 1 + 1;
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string room = 4;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room());
    }

    // optional string message = 5;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool requestAvatar = 6;
    if (has_requestavatar()) {
      total_size += 1 + 1;
    }

    // optional bytes avatar = 7;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional string timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QVERSO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QVERSO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QVERSO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QVERSO::MergeFrom(const QVERSO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_room()) {
      set_room(from.room());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_requestavatar()) {
      set_requestavatar(from.requestavatar());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QVERSO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QVERSO::CopyFrom(const QVERSO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QVERSO::IsInitialized() const {

  return true;
}

void QVERSO::Swap(QVERSO* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(room_, other->room_);
    std::swap(message_, other->message_);
    std::swap(requestavatar_, other->requestavatar_);
    std::swap(avatar_, other->avatar_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QVERSO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QVERSO_descriptor_;
  metadata.reflection = QVERSO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
