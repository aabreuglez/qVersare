// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QVERSO.proto

#ifndef PROTOBUF_QVERSO_2eproto__INCLUDED
#define PROTOBUF_QVERSO_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QVERSO_2eproto();
void protobuf_AssignDesc_QVERSO_2eproto();
void protobuf_ShutdownFile_QVERSO_2eproto();

class QVERSO;

// ===================================================================

class QVERSO : public ::google::protobuf::Message {
 public:
  QVERSO();
  virtual ~QVERSO();

  QVERSO(const QVERSO& from);

  inline QVERSO& operator=(const QVERSO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QVERSO& default_instance();

  void Swap(QVERSO* other);

  // implements Message ----------------------------------------------

  QVERSO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QVERSO& from);
  void MergeFrom(const QVERSO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline bool login() const;
  inline void set_login(bool value);

  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string room = 4;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 4;
  inline const ::std::string& room() const;
  inline void set_room(const ::std::string& value);
  inline void set_room(const char* value);
  inline void set_room(const char* value, size_t size);
  inline ::std::string* mutable_room();
  inline ::std::string* release_room();
  inline void set_allocated_room(::std::string* room);

  // optional string message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional bool requestAvatar = 6;
  inline bool has_requestavatar() const;
  inline void clear_requestavatar();
  static const int kRequestAvatarFieldNumber = 6;
  inline bool requestavatar() const;
  inline void set_requestavatar(bool value);

  // optional bytes avatar = 7;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 7;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional string timestamp = 8;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:QVERSO)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_requestavatar();
  inline void clear_has_requestavatar();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  ::std::string* room_;
  ::std::string* message_;
  ::std::string* avatar_;
  ::std::string* timestamp_;
  bool login_;
  bool requestavatar_;
  friend void  protobuf_AddDesc_QVERSO_2eproto();
  friend void protobuf_AssignDesc_QVERSO_2eproto();
  friend void protobuf_ShutdownFile_QVERSO_2eproto();

  void InitAsDefaultInstance();
  static QVERSO* default_instance_;
};
// ===================================================================


// ===================================================================

// QVERSO

// optional bool login = 1;
inline bool QVERSO::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QVERSO::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QVERSO::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QVERSO::clear_login() {
  login_ = false;
  clear_has_login();
}
inline bool QVERSO::login() const {
  // @@protoc_insertion_point(field_get:QVERSO.login)
  return login_;
}
inline void QVERSO::set_login(bool value) {
  set_has_login();
  login_ = value;
  // @@protoc_insertion_point(field_set:QVERSO.login)
}

// optional string username = 2;
inline bool QVERSO::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QVERSO::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QVERSO::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QVERSO::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& QVERSO::username() const {
  // @@protoc_insertion_point(field_get:QVERSO.username)
  return *username_;
}
inline void QVERSO::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:QVERSO.username)
}
inline void QVERSO::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:QVERSO.username)
}
inline void QVERSO::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QVERSO.username)
}
inline ::std::string* QVERSO::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QVERSO.username)
  return username_;
}
inline ::std::string* QVERSO::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QVERSO::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QVERSO.username)
}

// optional string password = 3;
inline bool QVERSO::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QVERSO::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QVERSO::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QVERSO::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& QVERSO::password() const {
  // @@protoc_insertion_point(field_get:QVERSO.password)
  return *password_;
}
inline void QVERSO::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:QVERSO.password)
}
inline void QVERSO::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:QVERSO.password)
}
inline void QVERSO::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QVERSO.password)
}
inline ::std::string* QVERSO::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QVERSO.password)
  return password_;
}
inline ::std::string* QVERSO::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QVERSO::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QVERSO.password)
}

// optional string room = 4;
inline bool QVERSO::has_room() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QVERSO::set_has_room() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QVERSO::clear_has_room() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QVERSO::clear_room() {
  if (room_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_->clear();
  }
  clear_has_room();
}
inline const ::std::string& QVERSO::room() const {
  // @@protoc_insertion_point(field_get:QVERSO.room)
  return *room_;
}
inline void QVERSO::set_room(const ::std::string& value) {
  set_has_room();
  if (room_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_ = new ::std::string;
  }
  room_->assign(value);
  // @@protoc_insertion_point(field_set:QVERSO.room)
}
inline void QVERSO::set_room(const char* value) {
  set_has_room();
  if (room_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_ = new ::std::string;
  }
  room_->assign(value);
  // @@protoc_insertion_point(field_set_char:QVERSO.room)
}
inline void QVERSO::set_room(const char* value, size_t size) {
  set_has_room();
  if (room_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_ = new ::std::string;
  }
  room_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QVERSO.room)
}
inline ::std::string* QVERSO::mutable_room() {
  set_has_room();
  if (room_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QVERSO.room)
  return room_;
}
inline ::std::string* QVERSO::release_room() {
  clear_has_room();
  if (room_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_;
    room_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QVERSO::set_allocated_room(::std::string* room) {
  if (room_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_;
  }
  if (room) {
    set_has_room();
    room_ = room;
  } else {
    clear_has_room();
    room_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QVERSO.room)
}

// optional string message = 5;
inline bool QVERSO::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QVERSO::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QVERSO::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QVERSO::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& QVERSO::message() const {
  // @@protoc_insertion_point(field_get:QVERSO.message)
  return *message_;
}
inline void QVERSO::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:QVERSO.message)
}
inline void QVERSO::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:QVERSO.message)
}
inline void QVERSO::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QVERSO.message)
}
inline ::std::string* QVERSO::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QVERSO.message)
  return message_;
}
inline ::std::string* QVERSO::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QVERSO::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QVERSO.message)
}

// optional bool requestAvatar = 6;
inline bool QVERSO::has_requestavatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QVERSO::set_has_requestavatar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QVERSO::clear_has_requestavatar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QVERSO::clear_requestavatar() {
  requestavatar_ = false;
  clear_has_requestavatar();
}
inline bool QVERSO::requestavatar() const {
  // @@protoc_insertion_point(field_get:QVERSO.requestAvatar)
  return requestavatar_;
}
inline void QVERSO::set_requestavatar(bool value) {
  set_has_requestavatar();
  requestavatar_ = value;
  // @@protoc_insertion_point(field_set:QVERSO.requestAvatar)
}

// optional bytes avatar = 7;
inline bool QVERSO::has_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QVERSO::set_has_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QVERSO::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QVERSO::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& QVERSO::avatar() const {
  // @@protoc_insertion_point(field_get:QVERSO.avatar)
  return *avatar_;
}
inline void QVERSO::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:QVERSO.avatar)
}
inline void QVERSO::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:QVERSO.avatar)
}
inline void QVERSO::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QVERSO.avatar)
}
inline ::std::string* QVERSO::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QVERSO.avatar)
  return avatar_;
}
inline ::std::string* QVERSO::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QVERSO::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QVERSO.avatar)
}

// optional string timestamp = 8;
inline bool QVERSO::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QVERSO::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QVERSO::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QVERSO::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& QVERSO::timestamp() const {
  // @@protoc_insertion_point(field_get:QVERSO.timestamp)
  return *timestamp_;
}
inline void QVERSO::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set:QVERSO.timestamp)
}
inline void QVERSO::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:QVERSO.timestamp)
}
inline void QVERSO::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QVERSO.timestamp)
}
inline ::std::string* QVERSO::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QVERSO.timestamp)
  return timestamp_;
}
inline ::std::string* QVERSO::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QVERSO::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QVERSO.timestamp)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QVERSO_2eproto__INCLUDED
