// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QVERSO.proto

#ifndef PROTOBUF_QVERSO_2eproto__INCLUDED
#define PROTOBUF_QVERSO_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QVERSO_2eproto();
void protobuf_AssignDesc_QVERSO_2eproto();
void protobuf_ShutdownFile_QVERSO_2eproto();

class LOG;
class QVERSO;

// ===================================================================

class LOG : public ::google::protobuf::Message {
 public:
  LOG();
  virtual ~LOG();

  LOG(const LOG& from);

  inline LOG& operator=(const LOG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LOG& default_instance();

  void Swap(LOG* other);

  // implements Message ----------------------------------------------

  LOG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LOG& from);
  void MergeFrom(const LOG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:LOG)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_QVERSO_2eproto();
  friend void protobuf_AssignDesc_QVERSO_2eproto();
  friend void protobuf_ShutdownFile_QVERSO_2eproto();

  void InitAsDefaultInstance();
  static LOG* default_instance_;
};
// -------------------------------------------------------------------

class QVERSO : public ::google::protobuf::Message {
 public:
  QVERSO();
  virtual ~QVERSO();

  QVERSO(const QVERSO& from);

  inline QVERSO& operator=(const QVERSO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QVERSO& default_instance();

  void Swap(QVERSO* other);

  // implements Message ----------------------------------------------

  QVERSO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QVERSO& from);
  void MergeFrom(const QVERSO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string imtesting = 1;
  inline bool has_imtesting() const;
  inline void clear_imtesting();
  static const int kImtestingFieldNumber = 1;
  inline const ::std::string& imtesting() const;
  inline void set_imtesting(const ::std::string& value);
  inline void set_imtesting(const char* value);
  inline void set_imtesting(const char* value, size_t size);
  inline ::std::string* mutable_imtesting();
  inline ::std::string* release_imtesting();
  inline void set_allocated_imtesting(::std::string* imtesting);

  // required uint32 keeptesting = 2;
  inline bool has_keeptesting() const;
  inline void clear_keeptesting();
  static const int kKeeptestingFieldNumber = 2;
  inline ::google::protobuf::uint32 keeptesting() const;
  inline void set_keeptesting(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:QVERSO)
 private:
  inline void set_has_imtesting();
  inline void clear_has_imtesting();
  inline void set_has_keeptesting();
  inline void clear_has_keeptesting();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* imtesting_;
  ::google::protobuf::uint32 keeptesting_;
  friend void  protobuf_AddDesc_QVERSO_2eproto();
  friend void protobuf_AssignDesc_QVERSO_2eproto();
  friend void protobuf_ShutdownFile_QVERSO_2eproto();

  void InitAsDefaultInstance();
  static QVERSO* default_instance_;
};
// ===================================================================


// ===================================================================

// LOG

// required string username = 1;
inline bool LOG::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LOG::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LOG::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LOG::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LOG::username() const {
  // @@protoc_insertion_point(field_get:LOG.username)
  return *username_;
}
inline void LOG::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:LOG.username)
}
inline void LOG::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:LOG.username)
}
inline void LOG::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LOG.username)
}
inline ::std::string* LOG::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LOG.username)
  return username_;
}
inline ::std::string* LOG::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LOG::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LOG.username)
}

// required string password = 2;
inline bool LOG::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LOG::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LOG::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LOG::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LOG::password() const {
  // @@protoc_insertion_point(field_get:LOG.password)
  return *password_;
}
inline void LOG::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:LOG.password)
}
inline void LOG::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:LOG.password)
}
inline void LOG::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LOG.password)
}
inline ::std::string* LOG::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LOG.password)
  return password_;
}
inline ::std::string* LOG::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LOG::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LOG.password)
}

// -------------------------------------------------------------------

// QVERSO

// optional string imtesting = 1;
inline bool QVERSO::has_imtesting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QVERSO::set_has_imtesting() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QVERSO::clear_has_imtesting() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QVERSO::clear_imtesting() {
  if (imtesting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imtesting_->clear();
  }
  clear_has_imtesting();
}
inline const ::std::string& QVERSO::imtesting() const {
  // @@protoc_insertion_point(field_get:QVERSO.imtesting)
  return *imtesting_;
}
inline void QVERSO::set_imtesting(const ::std::string& value) {
  set_has_imtesting();
  if (imtesting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imtesting_ = new ::std::string;
  }
  imtesting_->assign(value);
  // @@protoc_insertion_point(field_set:QVERSO.imtesting)
}
inline void QVERSO::set_imtesting(const char* value) {
  set_has_imtesting();
  if (imtesting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imtesting_ = new ::std::string;
  }
  imtesting_->assign(value);
  // @@protoc_insertion_point(field_set_char:QVERSO.imtesting)
}
inline void QVERSO::set_imtesting(const char* value, size_t size) {
  set_has_imtesting();
  if (imtesting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imtesting_ = new ::std::string;
  }
  imtesting_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QVERSO.imtesting)
}
inline ::std::string* QVERSO::mutable_imtesting() {
  set_has_imtesting();
  if (imtesting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imtesting_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QVERSO.imtesting)
  return imtesting_;
}
inline ::std::string* QVERSO::release_imtesting() {
  clear_has_imtesting();
  if (imtesting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imtesting_;
    imtesting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QVERSO::set_allocated_imtesting(::std::string* imtesting) {
  if (imtesting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imtesting_;
  }
  if (imtesting) {
    set_has_imtesting();
    imtesting_ = imtesting;
  } else {
    clear_has_imtesting();
    imtesting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QVERSO.imtesting)
}

// required uint32 keeptesting = 2;
inline bool QVERSO::has_keeptesting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QVERSO::set_has_keeptesting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QVERSO::clear_has_keeptesting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QVERSO::clear_keeptesting() {
  keeptesting_ = 0u;
  clear_has_keeptesting();
}
inline ::google::protobuf::uint32 QVERSO::keeptesting() const {
  // @@protoc_insertion_point(field_get:QVERSO.keeptesting)
  return keeptesting_;
}
inline void QVERSO::set_keeptesting(::google::protobuf::uint32 value) {
  set_has_keeptesting();
  keeptesting_ = value;
  // @@protoc_insertion_point(field_set:QVERSO.keeptesting)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QVERSO_2eproto__INCLUDED
